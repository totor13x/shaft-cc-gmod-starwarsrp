GUI3D = GUI3D or {} function GUI3D:GetDefaultConfig()	return {		//Не изменяй, это полностью отключает GUI3D из-за чего происходит обращение к несуществующим функциям		Enabled									= true, 				//true для отключения 3Д		DisablePushing							= false,				//Should player look at his cursor		LookAtCursor							= false,				//Use calculated angles when player look at his cursor		CalcViewAngle							= false,				//Should functions gui.ScreenToVector, util.AimVector, Vector:ToScreen be replaced. If you have conflicts then try to set it to false		ReplaceConverterFunctions				= true,				//Should shader draw functions be replaced. If you have problems with effects try to set it to false		ReplaceDrawFunctions					= false,				//Should render.UpdateScreenEffectTexture be replaced. If you have problems with effects - try to disable it		ReplaceUpdateScreenEffectTexture		= true,				//Should cam.Start2D and cam.End2D be replaced. Better don't touch this		RepalceCam2D							= true,				//Some weapons have 2D crosshairs and we draw it in 2D. By default all weapons HUD are drawing in 2D		//WARNING: If you want to use it for specific weapons, then you should write here it base, where DrawHUD is defined		WeaponsHUDIn2D							= {			//Here you should put all weapon names that should be drawn in 2D or put "*" for all weapons			"*"		},				//Speed of aiming on cursor		LookingAtCursorSpeed					= 20,				//Maximum angle of looking at cursor		MaxLookAtCursorAngle					= 15,				//Calculate current GUI angles from previous angles		ApproachAngles							= true,				//Approaching speed		ApproachAnglesSpeed						= 70,				//Mesh is a elliptical arc		//Ellipse radius along the X axis		RadiusX									= 10,				//Ellipse radius along the Y axis		RadiusY									= 45,				//Elliptical arc angle		ArcAngle								= 80,				//Mesh offset from the screen borders		Offset									= 20,		OffsetAlways							= 25,				//Additional offset		AdditionalOffset						= 5,				//Width parts		Width									= 16,				//Height parts		Height									= 9,				//Mesh background color		BackgroundColor							= Color(0, 0, 0, 0),				//Don't touch this		ReplaceBlendFunction					= true,				//Just for fun		Shaking									= false,		Rotating								= false,				//Cursor drawing		Cursor									= function(x, y)			local radius = 5			local border = 1						for i = 1, radius do				local color								if i >= radius - border then					color = Color(0, 0, 0)				else					color = Color(255, 0, 0)				end								surface.DrawCircle(x, y, i, color)			end		end,				//Debug stuff		Wireframe								= false,	}endfunction GUI3D:ReadConfig()	if file.Exists("gui3d/cfg.txt", "DATA") then		return util.JSONToTable(file.Read("gui3d/cfg.txt"))	else		return {}	endendfunction GUI3D:ChangeConfig(key, value, dontsave)	GUI3D.config[key] = value		if !dontsave then		local tbl = self:ReadConfig()		tbl[key] = value				file.CreateDir("gui3d")		file.Write("gui3d/cfg.txt", util.TableToJSON(tbl))	endendGUI3D.config = GUI3D:GetDefaultConfig()GUI3D.Initialized = trueif file.Exists("gui3d/cfg.txt", "DATA") then	for k, v in pairs(GUI3D:ReadConfig()) do		GUI3D.config[k] = v	endendhook.Add("InitPostEntity", "Load.GUI3D", function()	if GUI3D.Initialized then		GUI3D:GenerateMesh()	endend)